// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "buyback.proto" (package "buyback_proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Buyback } from "./buyback";
import type { BuyReq } from "./buyback";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Rep } from "./buyback";
import type { CheckReq } from "./buyback";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service buyback_proto.Buyback
 */
export interface IBuybackClient {
    /**
     * @generated from protobuf rpc: Check(buyback_proto.CheckReq) returns (buyback_proto.Rep);
     */
    check(input: CheckReq, options?: RpcOptions): UnaryCall<CheckReq, Rep>;
    /**
     * @generated from protobuf rpc: Buy(buyback_proto.BuyReq) returns (buyback_proto.Rep);
     */
    buy(input: BuyReq, options?: RpcOptions): UnaryCall<BuyReq, Rep>;
}
/**
 * @generated from protobuf service buyback_proto.Buyback
 */
export class BuybackClient implements IBuybackClient, ServiceInfo {
    typeName = Buyback.typeName;
    methods = Buyback.methods;
    options = Buyback.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Check(buyback_proto.CheckReq) returns (buyback_proto.Rep);
     */
    check(input: CheckReq, options?: RpcOptions): UnaryCall<CheckReq, Rep> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckReq, Rep>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Buy(buyback_proto.BuyReq) returns (buyback_proto.Rep);
     */
    buy(input: BuyReq, options?: RpcOptions): UnaryCall<BuyReq, Rep> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BuyReq, Rep>("unary", this._transport, method, opt, input);
    }
}
