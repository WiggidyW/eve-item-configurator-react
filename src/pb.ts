// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "item_configurator.proto" (package "item_configurator_proto", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message item_configurator_proto.ListItem
 */
export interface ListItem {
    /**
     * @generated from protobuf field: uint32 type_id = 1;
     */
    typeId: number;
    /**
     * @generated from protobuf field: bool enabled = 2;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: map<string, uint32> json_idx = 3;
     */
    jsonIdx: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 market_group_idx = 5;
     */
    marketGroupIdx: number;
    /**
     * @generated from protobuf field: uint32 group_idx = 6;
     */
    groupIdx: number;
    /**
     * @generated from protobuf field: uint32 category_idx = 7;
     */
    categoryIdx: number;
}
/**
 * @generated from protobuf message item_configurator_proto.ListRep
 */
export interface ListRep {
    /**
     * @generated from protobuf field: repeated item_configurator_proto.ListItem items = 1;
     */
    items: ListItem[];
    /**
     * @generated from protobuf field: repeated string json = 2;
     */
    json: string[];
    /**
     * @generated from protobuf field: repeated string market_groups = 3;
     */
    marketGroups: string[];
    /**
     * @generated from protobuf field: repeated string groups = 4;
     */
    groups: string[];
    /**
     * @generated from protobuf field: repeated string categories = 5;
     */
    categories: string[];
    /**
     * @generated from protobuf field: string refresh_token = 6;
     */
    refreshToken: string; // new ESI refresh token (for authentication)    /**
     * @generated from protobuf field: bool authorized = 7;
     */
    authorized: boolean; // whether the character from the token is authorized}
/**
 * @generated from protobuf message item_configurator_proto.ListReq
 */
export interface ListReq {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // name of the list    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string; // ESI refresh token (for authentication)    /**
     * @generated from protobuf field: item_configurator_proto.Query include_enabled = 3;
     */
    includeEnabled: Query; // whether to include enabled items    /**
     * @generated from protobuf field: item_configurator_proto.Query include_configured = 4;
     */
    includeConfigured: Query; // whether to include configured items    /**
     * @generated from protobuf field: bool include_json = 5;
     */
    includeJson: boolean;
    /**
     * @generated from protobuf field: string language = 6;
     */
    language: string;
    /**
     * @generated from protobuf field: bool include_name = 7;
     */
    includeName: boolean;
    /**
     * @generated from protobuf field: bool include_market_group = 8;
     */
    includeMarketGroup: boolean;
    /**
     * @generated from protobuf field: bool include_group = 9;
     */
    includeGroup: boolean;
    /**
     * @generated from protobuf field: bool include_category = 10;
     */
    includeCategory: boolean;
}
/**
 * @generated from protobuf message item_configurator_proto.UpdateItem
 */
export interface UpdateItem {
    /**
     * @generated from protobuf field: uint32 type_id = 1;
     */
    typeId: number;
    /**
     * @generated from protobuf field: bool enabled = 2;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: map<string, uint32> json_idx = 3;
     */
    jsonIdx: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message item_configurator_proto.UpdateRep
 */
export interface UpdateRep {
    /**
     * @generated from protobuf field: string refresh_token = 1;
     */
    refreshToken: string; // new ESI refresh token (for authentication)    /**
     * @generated from protobuf field: bool authorized = 2;
     */
    authorized: boolean; // whether the character from the token is authorized}
/**
 * Note: Don't delete JSON when things are disabled, keep storing it
 *
 * @generated from protobuf message item_configurator_proto.UpdateReq
 */
export interface UpdateReq {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // name of the list    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string; // ESI refresh token (for authentication)    /**
     * @generated from protobuf field: repeated item_configurator_proto.UpdateItem items = 3;
     */
    items: UpdateItem[];
    /**
     * @generated from protobuf field: repeated string json = 4;
     */
    json: string[];
}
/**
 * @generated from protobuf message item_configurator_proto.ListCharactersRep
 */
export interface ListCharactersRep {
    /**
     * @generated from protobuf field: repeated string characters = 1;
     */
    characters: string[];
    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string; // new ESI refresh token (for authentication)    /**
     * @generated from protobuf field: bool authorized = 3;
     */
    authorized: boolean; // whether the character from the token is authorized}
/**
 * @generated from protobuf message item_configurator_proto.ListCharactersReq
 */
export interface ListCharactersReq {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // name of the list    /**
     * @generated from protobuf field: bool auth_kind = 2;
     */
    authKind: boolean; // false for read, true for write    /**
     * @generated from protobuf field: bool auth_scope = 3;
     */
    authScope: boolean; // false for items, true for characters    /**
     * @generated from protobuf field: string refresh_token = 4;
     */
    refreshToken: string; // ESI refresh token (for authentication)}
/**
 * @generated from protobuf message item_configurator_proto.AddCharactersRep
 */
export interface AddCharactersRep {
    /**
     * @generated from protobuf field: string refresh_token = 1;
     */
    refreshToken: string; // new ESI refresh token (for authentication)    /**
     * @generated from protobuf field: bool authorized = 2;
     */
    authorized: boolean; // whether the character from the token is authorized}
/**
 * @generated from protobuf message item_configurator_proto.AddCharactersReq
 */
export interface AddCharactersReq {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // name of the list    /**
     * @generated from protobuf field: bool auth_kind = 2;
     */
    authKind: boolean; // false for read, true for write    /**
     * @generated from protobuf field: bool auth_scope = 3;
     */
    authScope: boolean; // false for items, true for characters    /**
     * @generated from protobuf field: string refresh_token = 4;
     */
    refreshToken: string; // ESI refresh token (for authentication)    /**
     * @generated from protobuf field: repeated string characters = 5;
     */
    characters: string[];
}
/**
 * @generated from protobuf message item_configurator_proto.DelCharactersRep
 */
export interface DelCharactersRep {
    /**
     * @generated from protobuf field: string refresh_token = 1;
     */
    refreshToken: string; // new ESI refresh token (for authentication)    /**
     * @generated from protobuf field: bool authorized = 2;
     */
    authorized: boolean; // whether the character from the token is authorized}
/**
 * @generated from protobuf message item_configurator_proto.DelCharactersReq
 */
export interface DelCharactersReq {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // name of the list    /**
     * @generated from protobuf field: bool auth_kind = 2;
     */
    authKind: boolean; // false for read, true for write    /**
     * @generated from protobuf field: bool auth_scope = 3;
     */
    authScope: boolean; // false for items, true for characters    /**
     * @generated from protobuf field: string refresh_token = 4;
     */
    refreshToken: string; // ESI refresh token (for authentication)    /**
     * @generated from protobuf field: repeated string characters = 5;
     */
    characters: string[];
}
/**
 * @generated from protobuf enum item_configurator_proto.Query
 */
export enum Query {
    /**
     * items for which value is true
     *
     * @generated from protobuf enum value: TRUE = 0;
     */
    TRUE = 0,
    /**
     * items for which value is false
     *
     * @generated from protobuf enum value: FALSE = 1;
     */
    FALSE = 1,
    /**
     * all items
     *
     * @generated from protobuf enum value: BOTH = 2;
     */
    BOTH = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ListItem$Type extends MessageType<ListItem> {
    constructor() {
        super("item_configurator_proto.ListItem", [
            { no: 1, name: "type_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "json_idx", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "market_group_idx", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "group_idx", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "category_idx", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListItem>): ListItem {
        const message = { typeId: 0, enabled: false, jsonIdx: {}, name: "", marketGroupIdx: 0, groupIdx: 0, categoryIdx: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItem): ListItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type_id */ 1:
                    message.typeId = reader.uint32();
                    break;
                case /* bool enabled */ 2:
                    message.enabled = reader.bool();
                    break;
                case /* map<string, uint32> json_idx */ 3:
                    this.binaryReadMap3(message.jsonIdx, reader, options);
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* uint32 market_group_idx */ 5:
                    message.marketGroupIdx = reader.uint32();
                    break;
                case /* uint32 group_idx */ 6:
                    message.groupIdx = reader.uint32();
                    break;
                case /* uint32 category_idx */ 7:
                    message.categoryIdx = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: ListItem["jsonIdx"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ListItem["jsonIdx"] | undefined, val: ListItem["jsonIdx"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field item_configurator_proto.ListItem.json_idx");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: ListItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type_id = 1; */
        if (message.typeId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.typeId);
        /* bool enabled = 2; */
        if (message.enabled !== false)
            writer.tag(2, WireType.Varint).bool(message.enabled);
        /* map<string, uint32> json_idx = 3; */
        for (let k of Object.keys(message.jsonIdx))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint32(message.jsonIdx[k]).join();
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* uint32 market_group_idx = 5; */
        if (message.marketGroupIdx !== 0)
            writer.tag(5, WireType.Varint).uint32(message.marketGroupIdx);
        /* uint32 group_idx = 6; */
        if (message.groupIdx !== 0)
            writer.tag(6, WireType.Varint).uint32(message.groupIdx);
        /* uint32 category_idx = 7; */
        if (message.categoryIdx !== 0)
            writer.tag(7, WireType.Varint).uint32(message.categoryIdx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.ListItem
 */
export const ListItem = new ListItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRep$Type extends MessageType<ListRep> {
    constructor() {
        super("item_configurator_proto.ListRep", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListItem },
            { no: 2, name: "json", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "market_groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "categories", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListRep>): ListRep {
        const message = { items: [], json: [], marketGroups: [], groups: [], categories: [], refreshToken: "", authorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRep): ListRep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated item_configurator_proto.ListItem items */ 1:
                    message.items.push(ListItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string json */ 2:
                    message.json.push(reader.string());
                    break;
                case /* repeated string market_groups */ 3:
                    message.marketGroups.push(reader.string());
                    break;
                case /* repeated string groups */ 4:
                    message.groups.push(reader.string());
                    break;
                case /* repeated string categories */ 5:
                    message.categories.push(reader.string());
                    break;
                case /* string refresh_token */ 6:
                    message.refreshToken = reader.string();
                    break;
                case /* bool authorized */ 7:
                    message.authorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated item_configurator_proto.ListItem items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ListItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string json = 2; */
        for (let i = 0; i < message.json.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.json[i]);
        /* repeated string market_groups = 3; */
        for (let i = 0; i < message.marketGroups.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.marketGroups[i]);
        /* repeated string groups = 4; */
        for (let i = 0; i < message.groups.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.groups[i]);
        /* repeated string categories = 5; */
        for (let i = 0; i < message.categories.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.categories[i]);
        /* string refresh_token = 6; */
        if (message.refreshToken !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.refreshToken);
        /* bool authorized = 7; */
        if (message.authorized !== false)
            writer.tag(7, WireType.Varint).bool(message.authorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.ListRep
 */
export const ListRep = new ListRep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListReq$Type extends MessageType<ListReq> {
    constructor() {
        super("item_configurator_proto.ListReq", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "include_enabled", kind: "enum", T: () => ["item_configurator_proto.Query", Query] },
            { no: 4, name: "include_configured", kind: "enum", T: () => ["item_configurator_proto.Query", Query] },
            { no: 5, name: "include_json", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "include_name", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "include_market_group", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "include_group", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "include_category", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListReq>): ListReq {
        const message = { name: "", refreshToken: "", includeEnabled: 0, includeConfigured: 0, includeJson: false, language: "", includeName: false, includeMarketGroup: false, includeGroup: false, includeCategory: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListReq): ListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* item_configurator_proto.Query include_enabled */ 3:
                    message.includeEnabled = reader.int32();
                    break;
                case /* item_configurator_proto.Query include_configured */ 4:
                    message.includeConfigured = reader.int32();
                    break;
                case /* bool include_json */ 5:
                    message.includeJson = reader.bool();
                    break;
                case /* string language */ 6:
                    message.language = reader.string();
                    break;
                case /* bool include_name */ 7:
                    message.includeName = reader.bool();
                    break;
                case /* bool include_market_group */ 8:
                    message.includeMarketGroup = reader.bool();
                    break;
                case /* bool include_group */ 9:
                    message.includeGroup = reader.bool();
                    break;
                case /* bool include_category */ 10:
                    message.includeCategory = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* item_configurator_proto.Query include_enabled = 3; */
        if (message.includeEnabled !== 0)
            writer.tag(3, WireType.Varint).int32(message.includeEnabled);
        /* item_configurator_proto.Query include_configured = 4; */
        if (message.includeConfigured !== 0)
            writer.tag(4, WireType.Varint).int32(message.includeConfigured);
        /* bool include_json = 5; */
        if (message.includeJson !== false)
            writer.tag(5, WireType.Varint).bool(message.includeJson);
        /* string language = 6; */
        if (message.language !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.language);
        /* bool include_name = 7; */
        if (message.includeName !== false)
            writer.tag(7, WireType.Varint).bool(message.includeName);
        /* bool include_market_group = 8; */
        if (message.includeMarketGroup !== false)
            writer.tag(8, WireType.Varint).bool(message.includeMarketGroup);
        /* bool include_group = 9; */
        if (message.includeGroup !== false)
            writer.tag(9, WireType.Varint).bool(message.includeGroup);
        /* bool include_category = 10; */
        if (message.includeCategory !== false)
            writer.tag(10, WireType.Varint).bool(message.includeCategory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.ListReq
 */
export const ListReq = new ListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItem$Type extends MessageType<UpdateItem> {
    constructor() {
        super("item_configurator_proto.UpdateItem", [
            { no: 1, name: "type_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "json_idx", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<UpdateItem>): UpdateItem {
        const message = { typeId: 0, enabled: false, jsonIdx: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItem): UpdateItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type_id */ 1:
                    message.typeId = reader.uint32();
                    break;
                case /* bool enabled */ 2:
                    message.enabled = reader.bool();
                    break;
                case /* map<string, uint32> json_idx */ 3:
                    this.binaryReadMap3(message.jsonIdx, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: UpdateItem["jsonIdx"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UpdateItem["jsonIdx"] | undefined, val: UpdateItem["jsonIdx"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field item_configurator_proto.UpdateItem.json_idx");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: UpdateItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type_id = 1; */
        if (message.typeId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.typeId);
        /* bool enabled = 2; */
        if (message.enabled !== false)
            writer.tag(2, WireType.Varint).bool(message.enabled);
        /* map<string, uint32> json_idx = 3; */
        for (let k of Object.keys(message.jsonIdx))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint32(message.jsonIdx[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.UpdateItem
 */
export const UpdateItem = new UpdateItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRep$Type extends MessageType<UpdateRep> {
    constructor() {
        super("item_configurator_proto.UpdateRep", [
            { no: 1, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRep>): UpdateRep {
        const message = { refreshToken: "", authorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRep): UpdateRep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refresh_token */ 1:
                    message.refreshToken = reader.string();
                    break;
                case /* bool authorized */ 2:
                    message.authorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refresh_token = 1; */
        if (message.refreshToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshToken);
        /* bool authorized = 2; */
        if (message.authorized !== false)
            writer.tag(2, WireType.Varint).bool(message.authorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.UpdateRep
 */
export const UpdateRep = new UpdateRep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateReq$Type extends MessageType<UpdateReq> {
    constructor() {
        super("item_configurator_proto.UpdateReq", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateItem },
            { no: 4, name: "json", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateReq>): UpdateReq {
        const message = { name: "", refreshToken: "", items: [], json: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateReq): UpdateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* repeated item_configurator_proto.UpdateItem items */ 3:
                    message.items.push(UpdateItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string json */ 4:
                    message.json.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* repeated item_configurator_proto.UpdateItem items = 3; */
        for (let i = 0; i < message.items.length; i++)
            UpdateItem.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string json = 4; */
        for (let i = 0; i < message.json.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.json[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.UpdateReq
 */
export const UpdateReq = new UpdateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCharactersRep$Type extends MessageType<ListCharactersRep> {
    constructor() {
        super("item_configurator_proto.ListCharactersRep", [
            { no: 1, name: "characters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListCharactersRep>): ListCharactersRep {
        const message = { characters: [], refreshToken: "", authorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCharactersRep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCharactersRep): ListCharactersRep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string characters */ 1:
                    message.characters.push(reader.string());
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* bool authorized */ 3:
                    message.authorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCharactersRep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string characters = 1; */
        for (let i = 0; i < message.characters.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.characters[i]);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* bool authorized = 3; */
        if (message.authorized !== false)
            writer.tag(3, WireType.Varint).bool(message.authorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.ListCharactersRep
 */
export const ListCharactersRep = new ListCharactersRep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCharactersReq$Type extends MessageType<ListCharactersReq> {
    constructor() {
        super("item_configurator_proto.ListCharactersReq", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auth_kind", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "auth_scope", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListCharactersReq>): ListCharactersReq {
        const message = { name: "", authKind: false, authScope: false, refreshToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCharactersReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCharactersReq): ListCharactersReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool auth_kind */ 2:
                    message.authKind = reader.bool();
                    break;
                case /* bool auth_scope */ 3:
                    message.authScope = reader.bool();
                    break;
                case /* string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCharactersReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool auth_kind = 2; */
        if (message.authKind !== false)
            writer.tag(2, WireType.Varint).bool(message.authKind);
        /* bool auth_scope = 3; */
        if (message.authScope !== false)
            writer.tag(3, WireType.Varint).bool(message.authScope);
        /* string refresh_token = 4; */
        if (message.refreshToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.ListCharactersReq
 */
export const ListCharactersReq = new ListCharactersReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCharactersRep$Type extends MessageType<AddCharactersRep> {
    constructor() {
        super("item_configurator_proto.AddCharactersRep", [
            { no: 1, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AddCharactersRep>): AddCharactersRep {
        const message = { refreshToken: "", authorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddCharactersRep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCharactersRep): AddCharactersRep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refresh_token */ 1:
                    message.refreshToken = reader.string();
                    break;
                case /* bool authorized */ 2:
                    message.authorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCharactersRep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refresh_token = 1; */
        if (message.refreshToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshToken);
        /* bool authorized = 2; */
        if (message.authorized !== false)
            writer.tag(2, WireType.Varint).bool(message.authorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.AddCharactersRep
 */
export const AddCharactersRep = new AddCharactersRep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCharactersReq$Type extends MessageType<AddCharactersReq> {
    constructor() {
        super("item_configurator_proto.AddCharactersReq", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auth_kind", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "auth_scope", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "characters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddCharactersReq>): AddCharactersReq {
        const message = { name: "", authKind: false, authScope: false, refreshToken: "", characters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddCharactersReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCharactersReq): AddCharactersReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool auth_kind */ 2:
                    message.authKind = reader.bool();
                    break;
                case /* bool auth_scope */ 3:
                    message.authScope = reader.bool();
                    break;
                case /* string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                case /* repeated string characters */ 5:
                    message.characters.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCharactersReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool auth_kind = 2; */
        if (message.authKind !== false)
            writer.tag(2, WireType.Varint).bool(message.authKind);
        /* bool auth_scope = 3; */
        if (message.authScope !== false)
            writer.tag(3, WireType.Varint).bool(message.authScope);
        /* string refresh_token = 4; */
        if (message.refreshToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.refreshToken);
        /* repeated string characters = 5; */
        for (let i = 0; i < message.characters.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.characters[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.AddCharactersReq
 */
export const AddCharactersReq = new AddCharactersReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelCharactersRep$Type extends MessageType<DelCharactersRep> {
    constructor() {
        super("item_configurator_proto.DelCharactersRep", [
            { no: 1, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DelCharactersRep>): DelCharactersRep {
        const message = { refreshToken: "", authorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DelCharactersRep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelCharactersRep): DelCharactersRep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refresh_token */ 1:
                    message.refreshToken = reader.string();
                    break;
                case /* bool authorized */ 2:
                    message.authorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DelCharactersRep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refresh_token = 1; */
        if (message.refreshToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshToken);
        /* bool authorized = 2; */
        if (message.authorized !== false)
            writer.tag(2, WireType.Varint).bool(message.authorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.DelCharactersRep
 */
export const DelCharactersRep = new DelCharactersRep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelCharactersReq$Type extends MessageType<DelCharactersReq> {
    constructor() {
        super("item_configurator_proto.DelCharactersReq", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auth_kind", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "auth_scope", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "characters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DelCharactersReq>): DelCharactersReq {
        const message = { name: "", authKind: false, authScope: false, refreshToken: "", characters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DelCharactersReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelCharactersReq): DelCharactersReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool auth_kind */ 2:
                    message.authKind = reader.bool();
                    break;
                case /* bool auth_scope */ 3:
                    message.authScope = reader.bool();
                    break;
                case /* string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                case /* repeated string characters */ 5:
                    message.characters.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DelCharactersReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool auth_kind = 2; */
        if (message.authKind !== false)
            writer.tag(2, WireType.Varint).bool(message.authKind);
        /* bool auth_scope = 3; */
        if (message.authScope !== false)
            writer.tag(3, WireType.Varint).bool(message.authScope);
        /* string refresh_token = 4; */
        if (message.refreshToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.refreshToken);
        /* repeated string characters = 5; */
        for (let i = 0; i < message.characters.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.characters[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message item_configurator_proto.DelCharactersReq
 */
export const DelCharactersReq = new DelCharactersReq$Type();
/**
 * @generated ServiceType for protobuf service item_configurator_proto.ItemConfigurator
 */
export const ItemConfigurator = new ServiceType("item_configurator_proto.ItemConfigurator", [
    { name: "Update", options: {}, I: UpdateReq, O: UpdateRep },
    { name: "List", options: {}, I: ListReq, O: ListRep },
    { name: "ListCharacters", options: {}, I: ListCharactersReq, O: ListCharactersRep },
    { name: "AddCharacters", options: {}, I: AddCharactersReq, O: AddCharactersRep },
    { name: "DelCharacters", options: {}, I: DelCharactersReq, O: DelCharactersRep }
]);
